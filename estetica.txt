"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Card } from "@/components/ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { ContextMenu, ContextMenuContent, ContextMenuItem, ContextMenuTrigger } from "@/components/ui/context-menu"
import {
  Search,
  Plus,
  Upload,
  Phone,
  User,
  FileText,
  DollarSign,
  Package,
  Filter,
  Calendar,
  Settings,
  Truck,
  X,
  Edit,
  Save,
  XCircle,
} from "lucide-react"

interface Pedido {
  id: string
  fecha: string
  nombre: string
  apellido: string
  diseno: string
  medida: string
  telefono: string
  contacto: string
  sello: number
  sena: number
  vEnvio: number
  restante: number
  fabricacion: string
  venta: string
  eEnvio: string
  notas: string
  base?: string
  vector?: string
  fSello?: string
  seguimiento: string
}

const estadosFabricacion = [
  { value: "haciendo", label: "En Proceso", color: "cyan", glow: "shadow-cyan-500/20" },
  { value: "sin-hacer", label: "Pendiente", color: "slate", glow: "shadow-slate-500/20" },
  { value: "hecho", label: "Completado", color: "emerald", glow: "shadow-emerald-500/20" },
  { value: "rehacer", label: "Rehacer", color: "red", glow: "shadow-red-500/20" },
  { value: "retocar", label: "Retocar", color: "amber", glow: "shadow-amber-500/20" },
  { value: "prioridad", label: "Prioridad", color: "purple", glow: "shadow-purple-500/20" },
  { value: "verificar", label: "Verificar", color: "teal", glow: "shadow-teal-500/20" },
]

const estadosVenta = [
  { value: "ninguno", label: "Sin Venta", color: "slate", glow: "shadow-slate-500/20" },
  { value: "foto", label: "Con Foto", color: "blue", glow: "shadow-blue-500/20" },
  { value: "transferido", label: "Transferido", color: "green", glow: "shadow-green-500/20" },
]

const estadosEnvio = [
  { value: "sin-enviar", label: "Sin Enviar", color: "slate", glow: "shadow-slate-500/20" },
  { value: "hacer-etiqueta", label: "Preparar", color: "orange", glow: "shadow-orange-500/20" },
  { value: "etiqueta-lista", label: "Listo", color: "violet", glow: "shadow-violet-500/20" },
]

const mediosContacto = ["WhatsApp", "Teléfono", "Email", "Instagram", "N/A"]

export default function GestionPedidos() {
  const [pedidos, setPedidos] = useState<Pedido[]>([
    {
      id: "1",
      fecha: "7/4/2025",
      nombre: "JOSE",
      apellido: "Lopez",
      diseno: "Logo corporativo minimalista",
      medida: "5x3 cm",
      telefono: "2234468195",
      contacto: "WhatsApp",
      sello: 45000,
      sena: 15000,
      vEnvio: 7000,
      restante: 30000,
      fabricacion: "haciendo",
      venta: "ninguno",
      eEnvio: "sin-enviar",
      notas: "Cliente premium - Entrega urgente",
      seguimiento: "TK001234567",
    },
    {
      id: "2",
      fecha: "7/4/2025",
      nombre: "Juli",
      apellido: "Moreno",
      diseno: "Tarjetas personales elegantes",
      medida: "8.5x5.5 cm",
      telefono: "2234468196",
      contacto: "WhatsApp",
      sello: 25000,
      sena: 8000,
      vEnvio: 3000,
      restante: 17000,
      fabricacion: "sin-hacer",
      venta: "foto",
      eEnvio: "sin-enviar",
      notas: "Diseño moderno",
      seguimiento: "",
    },
    {
      id: "3",
      fecha: "7/4/2025",
      nombre: "Ana",
      apellido: "García",
      diseno: "Sello empresarial moderno",
      medida: "4x4 cm",
      telefono: "2234468123",
      contacto: "Email",
      sello: 35000,
      sena: 12000,
      vEnvio: 5000,
      restante: 23000,
      fabricacion: "hecho",
      venta: "foto",
      eEnvio: "hacer-etiqueta",
      notas: "Diseño aprobado",
      seguimiento: "TK001234890",
    },
    {
      id: "4",
      fecha: "7/1/2025",
      nombre: "Carlos",
      apellido: "Ruiz",
      diseno: "Kit completo de branding",
      medida: "Varios tamaños",
      telefono: "2234468196",
      contacto: "WhatsApp",
      sello: 50000,
      sena: 20000,
      vEnvio: 4000,
      restante: 30000,
      fabricacion: "prioridad",
      venta: "transferido",
      eEnvio: "etiqueta-lista",
      notas: "Cliente VIP",
      seguimiento: "TK001235123",
    },
  ])

  const [busqueda, setBusqueda] = useState("")
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [isFilterOpen, setIsFilterOpen] = useState(false)
  const [editingId, setEditingId] = useState<string | null>(null)
  const [editingData, setEditingData] = useState<Pedido | null>(null)
  const [filtros, setFiltros] = useState({
    fecha: "",
    fabricacion: "",
    venta: "",
    envio: "",
  })
  const [nuevoPedido, setNuevoPedido] = useState({
    nombre: "",
    apellido: "",
    telefono: "",
    contacto: "",
    diseno: "",
    medida: "",
    fechaCompra: new Date().toISOString().split("T")[0],
    valorSello: "",
    valorEnvio: "",
    valorSena: "",
    fabricacion: "sin-hacer",
    venta: "ninguno",
    envio: "sin-enviar",
    seguimiento: "",
    notas: "",
  })

  const getEstadoStyle = (estado: string, tipo: "fabricacion" | "venta" | "envio") => {
    let estados = estadosFabricacion
    if (tipo === "venta") estados = estadosVenta
    if (tipo === "envio") estados = estadosEnvio

    const estadoObj = estados.find((e) => e.value === estado)
    return estadoObj || { color: "slate", glow: "shadow-slate-500/20", label: estado }
  }

  const handleCrearPedido = () => {
    const pedido: Pedido = {
      id: Date.now().toString(),
      fecha: new Date().toLocaleDateString("es-ES"),
      nombre: nuevoPedido.nombre,
      apellido: nuevoPedido.apellido,
      diseno: nuevoPedido.diseno,
      medida: nuevoPedido.medida,
      telefono: nuevoPedido.telefono,
      contacto: nuevoPedido.contacto,
      sello: Number.parseInt(nuevoPedido.valorSello) || 0,
      sena: Number.parseInt(nuevoPedido.valorSena) || 0,
      vEnvio: Number.parseInt(nuevoPedido.valorEnvio) || 0,
      restante: (Number.parseInt(nuevoPedido.valorSello) || 0) - (Number.parseInt(nuevoPedido.valorSena) || 0),
      fabricacion: nuevoPedido.fabricacion,
      venta: nuevoPedido.venta,
      eEnvio: nuevoPedido.envio,
      seguimiento: nuevoPedido.seguimiento,
      notas: nuevoPedido.notas,
    }

    setPedidos([pedido, ...pedidos])
    setNuevoPedido({
      nombre: "",
      apellido: "",
      telefono: "",
      contacto: "",
      diseno: "",
      medida: "",
      fechaCompra: new Date().toISOString().split("T")[0],
      valorSello: "",
      valorEnvio: "",
      valorSena: "",
      fabricacion: "sin-hacer",
      venta: "ninguno",
      envio: "sin-enviar",
      seguimiento: "",
      notas: "",
    })
    setIsDialogOpen(false)
  }

  const handleEditStart = (pedido: Pedido) => {
    setEditingId(pedido.id)
    setEditingData({ ...pedido })
  }

  const handleEditSave = () => {
    if (editingData) {
      // Recalcular restante
      const restante = editingData.sello - editingData.sena
      const updatedPedido = { ...editingData, restante }

      setPedidos(pedidos.map((p) => (p.id === editingId ? updatedPedido : p)))
      setEditingId(null)
      setEditingData(null)
    }
  }

  const handleEditCancel = () => {
    setEditingId(null)
    setEditingData(null)
  }

  const handleDoubleClick = (pedido: Pedido) => {
    handleEditStart(pedido)
  }

  const limpiarFiltros = () => {
    setFiltros({
      fecha: "",
      fabricacion: "",
      venta: "",
      envio: "",
    })
  }

  const pedidosFiltrados = pedidos.filter((pedido) => {
    const matchBusqueda =
      pedido.nombre.toLowerCase().includes(busqueda.toLowerCase()) ||
      pedido.apellido.toLowerCase().includes(busqueda.toLowerCase()) ||
      pedido.telefono.includes(busqueda) ||
      pedido.diseno.toLowerCase().includes(busqueda.toLowerCase())

    const matchFiltros =
      (!filtros.fabricacion || pedido.fabricacion === filtros.fabricacion) &&
      (!filtros.venta || pedido.venta === filtros.venta) &&
      (!filtros.envio || pedido.eEnvio === filtros.envio)

    return matchBusqueda && matchFiltros
  })

  const hayFiltrosActivos = Object.values(filtros).some((filtro) => filtro !== "")

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="border-b border-zinc-800/50 bg-zinc-950/80 backdrop-blur-xl sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-6">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-white rounded-lg flex items-center justify-center">
                  <Package className="w-5 h-5 text-black" />
                </div>
                <div>
                  <h1 className="text-2xl font-light tracking-tight">Pedidos</h1>
                  <p className="text-xs text-zinc-500 mt-0.5">{pedidos.length} activos</p>
                </div>
              </div>
            </div>

            <div className="flex items-center gap-4">
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-4 h-4 text-zinc-500" />
                <Input
                  placeholder="Buscar..."
                  value={busqueda}
                  onChange={(e) => setBusqueda(e.target.value)}
                  className="pl-12 w-80 bg-zinc-900/50 border-zinc-700/50 text-white placeholder:text-zinc-500 focus:border-zinc-600 transition-all duration-300"
                />
              </div>

              <Popover open={isFilterOpen} onOpenChange={setIsFilterOpen}>
                <PopoverTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className={`text-zinc-400 hover:text-white hover:bg-zinc-800/50 transition-all duration-300 ${
                      hayFiltrosActivos ? "bg-zinc-800/50 text-white" : ""
                    }`}
                  >
                    <Filter className="w-4 h-4" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent
                  className="w-96 p-0 bg-zinc-950/95 backdrop-blur-xl border-zinc-700/50 shadow-2xl shadow-black/50"
                  align="end"
                  sideOffset={8}
                >
                  <div className="p-6">
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center gap-3">
                        <div className="w-1 h-6 bg-gradient-to-b from-blue-500 to-purple-500 rounded-full"></div>
                        <h3 className="text-lg font-medium text-white">Filtros</h3>
                      </div>
                      {hayFiltrosActivos && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={limpiarFiltros}
                          className="text-zinc-400 hover:text-white hover:bg-zinc-800/50 text-xs"
                        >
                          <X className="w-3 h-3 mr-1" />
                          Limpiar
                        </Button>
                      )}
                    </div>

                    <div className="space-y-4">
                      {/* Filtro Fecha */}
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <div className="w-6 h-6 rounded-md bg-blue-500/10 flex items-center justify-center">
                            <Calendar className="w-3 h-3 text-blue-400" />
                          </div>
                          <Label className="text-sm text-zinc-300 font-medium">Fecha</Label>
                        </div>
                        <Select
                          value={filtros.fecha}
                          onValueChange={(value) => setFiltros({ ...filtros, fecha: value })}
                        >
                          <SelectTrigger className="bg-zinc-900/50 border-zinc-700/50 text-white focus:border-zinc-600">
                            <SelectValue placeholder="Todas las fechas" />
                          </SelectTrigger>
                          <SelectContent className="bg-zinc-900 border-zinc-700 shadow-2xl">
                            <SelectItem value="hoy" className="text-white focus:bg-zinc-800">
                              Hoy
                            </SelectItem>
                            <SelectItem value="semana" className="text-white focus:bg-zinc-800">
                              Esta semana
                            </SelectItem>
                            <SelectItem value="mes" className="text-white focus:bg-zinc-800">
                              Este mes
                            </SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      {/* Filtro Fabricación */}
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <div className="w-6 h-6 rounded-md bg-purple-500/10 flex items-center justify-center">
                            <Settings className="w-3 h-3 text-purple-400" />
                          </div>
                          <Label className="text-sm text-zinc-300 font-medium">Estado de Fabricación</Label>
                        </div>
                        <Select
                          value={filtros.fabricacion}
                          onValueChange={(value) => setFiltros({ ...filtros, fabricacion: value })}
                        >
                          <SelectTrigger className="bg-zinc-900/50 border-zinc-700/50 text-white focus:border-zinc-600">
                            <SelectValue placeholder="Todos los estados" />
                          </SelectTrigger>
                          <SelectContent className="bg-zinc-900 border-zinc-700 shadow-2xl">
                            {estadosFabricacion.map((estado) => (
                              <SelectItem
                                key={estado.value}
                                value={estado.value}
                                className="text-white focus:bg-zinc-800"
                              >
                                {estado.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      {/* Filtro Venta */}
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <div className="w-6 h-6 rounded-md bg-yellow-500/10 flex items-center justify-center">
                            <DollarSign className="w-3 h-3 text-yellow-400" />
                          </div>
                          <Label className="text-sm text-zinc-300 font-medium">Estado de Venta</Label>
                        </div>
                        <Select
                          value={filtros.venta}
                          onValueChange={(value) => setFiltros({ ...filtros, venta: value })}
                        >
                          <SelectTrigger className="bg-zinc-900/50 border-zinc-700/50 text-white focus:border-zinc-600">
                            <SelectValue placeholder="Todos los estados" />
                          </SelectTrigger>
                          <SelectContent className="bg-zinc-900 border-zinc-700 shadow-2xl">
                            {estadosVenta.map((estado) => (
                              <SelectItem
                                key={estado.value}
                                value={estado.value}
                                className="text-white focus:bg-zinc-800"
                              >
                                {estado.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      {/* Filtro Envío */}
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <div className="w-6 h-6 rounded-md bg-orange-500/10 flex items-center justify-center">
                            <Truck className="w-3 h-3 text-orange-400" />
                          </div>
                          <Label className="text-sm text-zinc-300 font-medium">Estado de Envío</Label>
                        </div>
                        <Select
                          value={filtros.envio}
                          onValueChange={(value) => setFiltros({ ...filtros, envio: value })}
                        >
                          <SelectTrigger className="bg-zinc-900/50 border-zinc-700/50 text-white focus:border-zinc-600">
                            <SelectValue placeholder="Todos los estados" />
                          </SelectTrigger>
                          <SelectContent className="bg-zinc-900 border-zinc-700 shadow-2xl">
                            {estadosEnvio.map((estado) => (
                              <SelectItem
                                key={estado.value}
                                value={estado.value}
                                className="text-white focus:bg-zinc-800"
                              >
                                {estado.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    {/* Indicador de resultados */}
                    {(hayFiltrosActivos || busqueda) && (
                      <div className="mt-6 pt-4 border-t border-zinc-800/50">
                        <p className="text-sm text-zinc-500">
                          <span className="text-white font-medium">{pedidosFiltrados.length}</span> de{" "}
                          <span className="text-zinc-400">{pedidos.length}</span> pedidos
                        </p>
                      </div>
                    )}
                  </div>
                </PopoverContent>
              </Popover>

              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <DialogTrigger asChild>
                  <Button className="bg-white text-black hover:bg-zinc-200 transition-all duration-300 font-medium">
                    <Plus className="w-4 h-4 mr-2" />
                    Nuevo
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-4xl bg-zinc-950/98 backdrop-blur-xl border-zinc-800/50 shadow-2xl shadow-black/80">
                  <DialogHeader className="pb-8 border-b border-zinc-800/50">
                    <DialogTitle className="text-2xl font-light tracking-tight text-white">Crear Pedido</DialogTitle>
                  </DialogHeader>

                  <div className="grid grid-cols-2 gap-8 py-6">
                    <div className="space-y-6">
                      <div className="space-y-3">
                        <Label className="text-zinc-300 text-sm font-medium flex items-center gap-2">
                          <User className="w-4 h-4" />
                          Cliente
                        </Label>
                        <div className="grid grid-cols-2 gap-3">
                          <Input
                            placeholder="Nombre"
                            value={nuevoPedido.nombre}
                            onChange={(e) => setNuevoPedido({ ...nuevoPedido, nombre: e.target.value })}
                            className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700"
                          />
                          <Input
                            placeholder="Apellido"
                            value={nuevoPedido.apellido}
                            onChange={(e) => setNuevoPedido({ ...nuevoPedido, apellido: e.target.value })}
                            className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700"
                          />
                        </div>
                      </div>

                      <div className="space-y-3">
                        <Label className="text-zinc-300 text-sm font-medium flex items-center gap-2">
                          <Phone className="w-4 h-4" />
                          Contacto
                        </Label>
                        <div className="grid grid-cols-2 gap-3">
                          <Input
                            placeholder="Teléfono"
                            value={nuevoPedido.telefono}
                            onChange={(e) => setNuevoPedido({ ...nuevoPedido, telefono: e.target.value })}
                            className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700"
                          />
                          <Select
                            value={nuevoPedido.contacto}
                            onValueChange={(value) => setNuevoPedido({ ...nuevoPedido, contacto: value })}
                          >
                            <SelectTrigger className="bg-zinc-900/50 border-zinc-800/50 text-white focus:border-zinc-700">
                              <SelectValue placeholder="Medio" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-800">
                              {mediosContacto.map((medio) => (
                                <SelectItem key={medio} value={medio} className="text-white focus:bg-zinc-800">
                                  {medio}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <div className="space-y-3">
                        <Label className="text-zinc-300 text-sm font-medium flex items-center gap-2">
                          <FileText className="w-4 h-4" />
                          Diseño
                        </Label>
                        <Textarea
                          placeholder="Descripción del diseño..."
                          value={nuevoPedido.diseno}
                          onChange={(e) => setNuevoPedido({ ...nuevoPedido, diseno: e.target.value })}
                          className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700 resize-none"
                          rows={3}
                        />
                        <Input
                          placeholder="Medidas (ej: 5x3 cm)"
                          value={nuevoPedido.medida}
                          onChange={(e) => setNuevoPedido({ ...nuevoPedido, medida: e.target.value })}
                          className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700"
                        />
                      </div>
                    </div>

                    <div className="space-y-6">
                      <div className="space-y-3">
                        <Label className="text-zinc-300 text-sm font-medium flex items-center gap-2">
                          <DollarSign className="w-4 h-4" />
                          Valores
                        </Label>
                        <div className="grid grid-cols-3 gap-3">
                          <Input
                            placeholder="Sello"
                            type="number"
                            value={nuevoPedido.valorSello}
                            onChange={(e) => setNuevoPedido({ ...nuevoPedido, valorSello: e.target.value })}
                            className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700"
                          />
                          <Input
                            placeholder="Seña"
                            type="number"
                            value={nuevoPedido.valorSena}
                            onChange={(e) => setNuevoPedido({ ...nuevoPedido, valorSena: e.target.value })}
                            className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700"
                          />
                          <Input
                            placeholder="Envío"
                            type="number"
                            value={nuevoPedido.valorEnvio}
                            onChange={(e) => setNuevoPedido({ ...nuevoPedido, valorEnvio: e.target.value })}
                            className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700"
                          />
                        </div>
                      </div>

                      <div className="space-y-3">
                        <Label className="text-zinc-300 text-sm font-medium">Estados</Label>
                        <div className="grid grid-cols-2 gap-3">
                          <Select
                            value={nuevoPedido.fabricacion}
                            onValueChange={(value) => setNuevoPedido({ ...nuevoPedido, fabricacion: value })}
                          >
                            <SelectTrigger className="bg-zinc-900/50 border-zinc-800/50 text-white focus:border-zinc-700">
                              <SelectValue placeholder="Fabricación" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-800">
                              {estadosFabricacion.map((estado) => (
                                <SelectItem
                                  key={estado.value}
                                  value={estado.value}
                                  className="text-white focus:bg-zinc-800"
                                >
                                  {estado.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>

                          <Select
                            value={nuevoPedido.venta}
                            onValueChange={(value) => setNuevoPedido({ ...nuevoPedido, venta: value })}
                          >
                            <SelectTrigger className="bg-zinc-900/50 border-zinc-800/50 text-white focus:border-zinc-700">
                              <SelectValue placeholder="Venta" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-800">
                              {estadosVenta.map((estado) => (
                                <SelectItem
                                  key={estado.value}
                                  value={estado.value}
                                  className="text-white focus:bg-zinc-800"
                                >
                                  {estado.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>

                          <Select
                            value={nuevoPedido.envio}
                            onValueChange={(value) => setNuevoPedido({ ...nuevoPedido, envio: value })}
                          >
                            <SelectTrigger className="bg-zinc-900/50 border-zinc-800/50 text-white focus:border-zinc-700">
                              <SelectValue placeholder="Envío" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-800">
                              {estadosEnvio.map((estado) => (
                                <SelectItem
                                  key={estado.value}
                                  value={estado.value}
                                  className="text-white focus:bg-zinc-800"
                                >
                                  {estado.label}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>

                          <Input
                            placeholder="Número de seguimiento"
                            value={nuevoPedido.seguimiento}
                            onChange={(e) => setNuevoPedido({ ...nuevoPedido, seguimiento: e.target.value })}
                            className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700"
                          />
                        </div>
                      </div>

                      <div className="space-y-3">
                        <Label className="text-zinc-300 text-sm font-medium flex items-center gap-2">
                          <Upload className="w-4 h-4" />
                          Archivos
                        </Label>
                        <div className="grid grid-cols-2 gap-3">
                          <Input
                            type="file"
                            accept=".jpg,.png,.jpeg"
                            className="bg-zinc-900/50 border-zinc-800/50 text-white file:bg-zinc-800 file:text-white file:border-0"
                          />
                          <Input
                            type="file"
                            accept=".eps,.svg,.ai,.pdf"
                            className="bg-zinc-900/50 border-zinc-800/50 text-white file:bg-zinc-800 file:text-white file:border-0"
                          />
                        </div>
                      </div>

                      <div className="space-y-3">
                        <Label className="text-zinc-300 text-sm font-medium">Notas</Label>
                        <Textarea
                          placeholder="Información adicional..."
                          value={nuevoPedido.notas}
                          onChange={(e) => setNuevoPedido({ ...nuevoPedido, notas: e.target.value })}
                          className="bg-zinc-900/50 border-zinc-800/50 text-white placeholder:text-zinc-500 focus:border-zinc-700 resize-none"
                          rows={3}
                        />
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-end gap-3 pt-6 border-t border-zinc-800/50">
                    <Button
                      variant="ghost"
                      onClick={() => setIsDialogOpen(false)}
                      className="text-zinc-400 hover:text-white hover:bg-zinc-800/50"
                    >
                      Cancelar
                    </Button>
                    <Button
                      onClick={handleCrearPedido}
                      className="bg-white text-black hover:bg-zinc-200 transition-all duration-300"
                    >
                      Crear Pedido
                    </Button>
                  </div>
                </DialogContent>
              </Dialog>
            </div>
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="max-w-full mx-auto px-8 py-8">
        <Card className="bg-zinc-950/50 backdrop-blur-xl border-zinc-800/50 shadow-2xl overflow-hidden">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="border-zinc-800/50 hover:bg-transparent">
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider py-6 pl-6">
                    Cliente
                  </TableHead>
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider">Diseño</TableHead>
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider">Contacto</TableHead>
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider">Valores</TableHead>
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider">Estado</TableHead>
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider">Base</TableHead>
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider">Vector</TableHead>
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider">F Sello</TableHead>
                  <TableHead className="text-zinc-400 font-medium text-xs uppercase tracking-wider">
                    Seguimiento
                  </TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {pedidosFiltrados.map((pedido, index) => {
                  const isEditing = editingId === pedido.id
                  const currentData = isEditing ? editingData! : pedido

                  return (
                    <ContextMenu key={pedido.id}>
                      <ContextMenuTrigger asChild>
                        <TableRow
                          className={`border-zinc-800/30 hover:bg-zinc-900/30 transition-all duration-300 group cursor-pointer ${
                            isEditing ? "bg-zinc-900/50 ring-1 ring-blue-500/30" : ""
                          }`}
                          onDoubleClick={() => !isEditing && handleDoubleClick(pedido)}
                        >
                          <TableCell className="py-6 pl-6">
                            <div className="flex items-center gap-4">
                              <div className="w-10 h-10 bg-zinc-800 rounded-full flex items-center justify-center">
                                <span className="text-sm font-medium text-white">
                                  {currentData.nombre.charAt(0)}
                                  {currentData.apellido.charAt(0)}
                                </span>
                              </div>
                              <div>
                                {isEditing ? (
                                  <>
                                    <div className="font-medium text-white flex gap-1">
                                      <input
                                        value={currentData.nombre}
                                        onChange={(e) => setEditingData({ ...currentData, nombre: e.target.value })}
                                        className="bg-transparent border-none outline-none p-0 text-white font-medium w-auto min-w-[60px] focus:bg-zinc-800/30 focus:px-1 focus:rounded"
                                        style={{ width: `${Math.max(currentData.nombre.length * 8, 60)}px` }}
                                      />
                                      <input
                                        value={currentData.apellido}
                                        onChange={(e) => setEditingData({ ...currentData, apellido: e.target.value })}
                                        className="bg-transparent border-none outline-none p-0 text-white font-medium w-auto min-w-[60px] focus:bg-zinc-800/30 focus:px-1 focus:rounded"
                                        style={{ width: `${Math.max(currentData.apellido.length * 8, 60)}px` }}
                                      />
                                    </div>
                                    <p className="text-sm text-zinc-500">{currentData.fecha}</p>
                                  </>
                                ) : (
                                  <>
                                    <p className="font-medium text-white">
                                      {currentData.nombre} {currentData.apellido}
                                    </p>
                                    <p className="text-sm text-zinc-500">{currentData.fecha}</p>
                                  </>
                                )}
                              </div>
                            </div>
                          </TableCell>

                          <TableCell>
                            <div className="max-w-48">
                              {isEditing ? (
                                <>
                                  <input
                                    value={currentData.diseno}
                                    onChange={(e) => setEditingData({ ...currentData, diseno: e.target.value })}
                                    className="text-white font-medium truncate bg-transparent border-none outline-none p-0 w-full focus:bg-zinc-800/30 focus:px-1 focus:rounded"
                                    placeholder="Sin especificar"
                                  />
                                  <div className="text-sm text-zinc-500 truncate flex">
                                    {currentData.medida && (
                                      <>
                                        <input
                                          value={currentData.medida}
                                          onChange={(e) => setEditingData({ ...currentData, medida: e.target.value })}
                                          className="bg-transparent border-none outline-none p-0 text-zinc-500 text-sm w-auto min-w-[40px] focus:bg-zinc-800/30 focus:px-1 focus:rounded"
                                          style={{ width: `${Math.max(currentData.medida.length * 7, 40)}px` }}
                                        />
                                        <span className="mx-1">•</span>
                                      </>
                                    )}
                                    <input
                                      value={currentData.notas}
                                      onChange={(e) => setEditingData({ ...currentData, notas: e.target.value })}
                                      className="bg-transparent border-none outline-none p-0 text-zinc-500 text-sm flex-1 focus:bg-zinc-800/30 focus:px-1 focus:rounded"
                                      placeholder="Sin notas"
                                    />
                                  </div>
                                </>
                              ) : (
                                <>
                                  <p className="text-white font-medium truncate">
                                    {currentData.diseno || "Sin especificar"}
                                  </p>
                                  <p className="text-sm text-zinc-500 truncate">
                                    {currentData.medida && `${currentData.medida} • `}
                                    {currentData.notas || "Sin notas"}
                                  </p>
                                </>
                              )}
                            </div>
                          </TableCell>

                          <TableCell>
                            {isEditing ? (
                              <div>
                                <select
                                  value={currentData.contacto}
                                  onChange={(e) => setEditingData({ ...currentData, contacto: e.target.value })}
                                  className="text-white text-sm bg-transparent border-none outline-none p-0 focus:bg-zinc-800/30 focus:px-1 focus:rounded"
                                >
                                  {mediosContacto.map((medio) => (
                                    <option key={medio} value={medio} className="bg-zinc-900 text-white">
                                      {medio}
                                    </option>
                                  ))}
                                </select>
                                <input
                                  value={currentData.telefono}
                                  onChange={(e) => setEditingData({ ...currentData, telefono: e.target.value })}
                                  className="text-zinc-500 text-xs bg-transparent border-none outline-none p-0 w-full focus:bg-zinc-800/30 focus:px-1 focus:rounded block"
                                />
                              </div>
                            ) : (
                              <div>
                                <p className="text-white text-sm">{currentData.contacto}</p>
                                <p className="text-zinc-500 text-xs">{currentData.telefono}</p>
                              </div>
                            )}
                          </TableCell>

                          <TableCell>
                            <div className="space-y-1">
                              {isEditing ? (
                                <>
                                  <p className="text-white font-mono text-sm flex items-center">
                                    $
                                    <input
                                      type="number"
                                      value={currentData.sello}
                                      onChange={(e) =>
                                        setEditingData({ ...currentData, sello: Number(e.target.value) || 0 })
                                      }
                                      className="bg-transparent border-none outline-none p-0 text-white font-mono text-sm w-auto min-w-[60px] focus:bg-zinc-800/30 focus:px-1 focus:rounded ml-0"
                                      style={{ width: `${Math.max(currentData.sello.toString().length * 8, 60)}px` }}
                                    />
                                    <span className="text-zinc-500 text-[10px] ml-1">
                                      (
                                      <input
                                        type="number"
                                        value={currentData.sena}
                                        onChange={(e) =>
                                          setEditingData({ ...currentData, sena: Number(e.target.value) || 0 })
                                        }
                                        className="bg-transparent border-none outline-none p-0 text-zinc-500 text-[10px] w-auto min-w-[30px] focus:bg-zinc-800/30 focus:px-1 focus:rounded"
                                        style={{ width: `${Math.max(currentData.sena.toString().length * 6, 30)}px` }}
                                      />
                                      )
                                    </span>
                                  </p>
                                  <p className="text-zinc-500 text-xs">
                                    Resta: ${(currentData.sello - currentData.sena).toLocaleString()}
                                  </p>
                                </>
                              ) : (
                                <>
                                  <p className="text-white font-mono text-sm">
                                    ${currentData.sello.toLocaleString()}{" "}
                                    <span className="text-zinc-500 text-[10px]">
                                      ({currentData.sena.toLocaleString()})
                                    </span>
                                  </p>
                                  <p className="text-zinc-500 text-xs">
                                    Resta: ${currentData.restante.toLocaleString()}
                                  </p>
                                </>
                              )}
                            </div>
                          </TableCell>

                          <TableCell>
                            <div className="flex flex-col gap-2">
                              {(() => {
                                const fabricacion = getEstadoStyle(currentData.fabricacion, "fabricacion")
                                const venta = getEstadoStyle(currentData.venta, "venta")
                                const envio = getEstadoStyle(currentData.eEnvio, "envio")
                                return (
                                  <>
                                    {isEditing ? (
                                      <select
                                        value={currentData.fabricacion}
                                        onChange={(e) =>
                                          setEditingData({ ...currentData, fabricacion: e.target.value })
                                        }
                                        className={`bg-${fabricacion.color}-500/10 text-${fabricacion.color}-400 border border-${fabricacion.color}-500/20 text-xs px-2 py-1 rounded-md outline-none focus:ring-1 focus:ring-${fabricacion.color}-500/50`}
                                      >
                                        {estadosFabricacion.map((estado) => (
                                          <option
                                            key={estado.value}
                                            value={estado.value}
                                            className="bg-zinc-900 text-white"
                                          >
                                            {estado.label}
                                          </option>
                                        ))}
                                      </select>
                                    ) : (
                                      <Badge
                                        className={`bg-${fabricacion.color}-500/10 text-${fabricacion.color}-400 border-${fabricacion.color}-500/20 hover:bg-${fabricacion.color}-500/20 transition-all duration-300 ${fabricacion.glow} text-xs`}
                                      >
                                        {fabricacion.label}
                                      </Badge>
                                    )}
                                    <div className="flex gap-1">
                                      {isEditing ? (
                                        <>
                                          <select
                                            value={currentData.venta}
                                            onChange={(e) => setEditingData({ ...currentData, venta: e.target.value })}
                                            className={`bg-${venta.color}-500/10 text-${venta.color}-400 border border-${venta.color}-500/20 text-xs px-1 py-0.5 rounded-md outline-none focus:ring-1 focus:ring-${venta.color}-500/50`}
                                          >
                                            {estadosVenta.map((estado) => (
                                              <option
                                                key={estado.value}
                                                value={estado.value}
                                                className="bg-zinc-900 text-white"
                                              >
                                                {estado.label}
                                              </option>
                                            ))}
                                          </select>
                                          <select
                                            value={currentData.eEnvio}
                                            onChange={(e) => setEditingData({ ...currentData, eEnvio: e.target.value })}
                                            className={`bg-${envio.color}-500/10 text-${envio.color}-400 border border-${envio.color}-500/20 text-xs px-1 py-0.5 rounded-md outline-none focus:ring-1 focus:ring-${envio.color}-500/50`}
                                          >
                                            {estadosEnvio.map((estado) => (
                                              <option
                                                key={estado.value}
                                                value={estado.value}
                                                className="bg-zinc-900 text-white"
                                              >
                                                {estado.label}
                                              </option>
                                            ))}
                                          </select>
                                        </>
                                      ) : (
                                        <>
                                          <Badge
                                            className={`bg-${venta.color}-500/10 text-${venta.color}-400 border-${venta.color}-500/20 text-xs`}
                                          >
                                            {venta.label}
                                          </Badge>
                                          <Badge
                                            className={`bg-${envio.color}-500/10 text-${envio.color}-400 border-${envio.color}-500/20 text-xs`}
                                          >
                                            {envio.label}
                                          </Badge>
                                        </>
                                      )}
                                    </div>
                                  </>
                                )
                              })()}
                            </div>
                          </TableCell>

                          <TableCell>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="text-zinc-400 hover:text-white hover:bg-zinc-800/50 transition-all duration-300 border border-zinc-700/50 hover:border-zinc-600/50"
                            >
                              <Upload className="w-3 h-3 mr-1" />
                              {currentData.base ? "Ver" : "Subir"}
                            </Button>
                          </TableCell>

                          <TableCell>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="text-zinc-400 hover:text-white hover:bg-zinc-800/50 transition-all duration-300 border border-zinc-700/50 hover:border-zinc-600/50"
                            >
                              <Upload className="w-3 h-3 mr-1" />
                              {currentData.vector ? "Ver" : "Subir"}
                            </Button>
                          </TableCell>

                          <TableCell>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="text-zinc-400 hover:text-white hover:bg-zinc-800/50 transition-all duration-300 border border-zinc-700/50 hover:border-zinc-600/50"
                            >
                              <Upload className="w-3 h-3 mr-1" />
                              Foto
                            </Button>
                          </TableCell>

                          <TableCell>
                            {isEditing ? (
                              <input
                                value={currentData.seguimiento}
                                onChange={(e) => setEditingData({ ...currentData, seguimiento: e.target.value })}
                                className="font-mono text-xs text-zinc-300 bg-transparent border-none outline-none p-0 w-full focus:bg-zinc-800/30 focus:px-1 focus:rounded"
                                placeholder="Sin asignar"
                              />
                            ) : (
                              <div className="font-mono text-xs text-zinc-300">
                                {currentData.seguimiento || <span className="text-zinc-500 italic">Sin asignar</span>}
                              </div>
                            )}
                          </TableCell>
                        </TableRow>
                      </ContextMenuTrigger>
                      <ContextMenuContent className="bg-zinc-900 border-zinc-700 shadow-2xl">
                        <ContextMenuItem
                          onClick={() => handleEditStart(pedido)}
                          className="text-white hover:bg-zinc-800 focus:bg-zinc-800"
                          disabled={isEditing}
                        >
                          <Edit className="w-4 h-4 mr-2" />
                          Editar
                        </ContextMenuItem>
                      </ContextMenuContent>
                    </ContextMenu>
                  )
                })}
              </TableBody>
            </Table>
          </div>
        </Card>

        {/* Botones de edición flotantes */}
        {editingId && (
          <div className="fixed bottom-8 right-8 flex gap-3 z-50">
            <Button
              onClick={handleEditCancel}
              variant="ghost"
              className="bg-zinc-900/90 backdrop-blur-xl border border-zinc-700/50 text-zinc-400 hover:text-white hover:bg-zinc-800/90 shadow-2xl"
            >
              <XCircle className="w-4 h-4 mr-2" />
              Cancelar
            </Button>
            <Button onClick={handleEditSave} className="bg-white text-black hover:bg-zinc-200 shadow-2xl">
              <Save className="w-4 h-4 mr-2" />
              Guardar
            </Button>
          </div>
        )}
      </div>
    </div>
  )
}
