-- ================================================
-- FUNCIONES RPC PARA SUPABASE - PROYECTO ALCOHN
-- ================================================

-- 1. FUNCIÓN PARA ACTUALIZAR RESUMEN DE PROGRAMA
-- ===============================================

CREATE OR REPLACE FUNCTION actualizar_resumen_programa(programa_id text)
RETURNS TABLE (
  id_programa text,
  tiempo_usado integer,
  largo_usado_38 numeric,
  largo_usado_25 numeric,
  largo_usado_19 numeric,
  largo_usado_12 numeric,
  largo_usado_63 numeric,
  success boolean,
  message text
)
LANGUAGE plpgsql
AS $$
DECLARE
  tiempo_total integer;
  largo_38 numeric := 0;
  largo_25 numeric := 0;
  largo_19 numeric := 0;
  largo_12 numeric := 0;
  largo_63 numeric := 0;
BEGIN
  -- Verificar que el programa existe
  IF NOT EXISTS(SELECT 1 FROM programas WHERE id_programa = programa_id) THEN
    RETURN QUERY SELECT 
      programa_id::text,
      0::integer,
      0::numeric,
      0::numeric,
      0::numeric,
      0::numeric,
      0::numeric,
      false::boolean,
      'El programa especificado no existe'::text;
    RETURN;
  END IF;

  -- Calcular la suma del tiempo_estimado de todos los pedidos del programa
  SELECT COALESCE(SUM(p.tiempo_estimado), 0) INTO tiempo_total
  FROM pedidos p
  WHERE p.id_programa = programa_id;

  -- Calcular la suma de largo_planchuela por tipo de planchuela
  SELECT COALESCE(SUM(p.largo_planchuela), 0) INTO largo_38
  FROM pedidos p
  WHERE p.id_programa = programa_id AND p.tipo_planchuela = 38;

  SELECT COALESCE(SUM(p.largo_planchuela), 0) INTO largo_25
  FROM pedidos p
  WHERE p.id_programa = programa_id AND p.tipo_planchuela = 25;

  SELECT COALESCE(SUM(p.largo_planchuela), 0) INTO largo_19
  FROM pedidos p
  WHERE p.id_programa = programa_id AND p.tipo_planchuela = 19;

  SELECT COALESCE(SUM(p.largo_planchuela), 0) INTO largo_12
  FROM pedidos p
  WHERE p.id_programa = programa_id AND p.tipo_planchuela = 12;

  SELECT COALESCE(SUM(p.largo_planchuela), 0) INTO largo_63
  FROM pedidos p
  WHERE p.id_programa = programa_id AND p.tipo_planchuela = 63;

  -- Actualizar el programa con los valores calculados
  UPDATE programas 
  SET 
    tiempo_usado = tiempo_total,
    largo_usado_38 = largo_38,
    largo_usado_25 = largo_25,
    largo_usado_19 = largo_19,
    largo_usado_12 = largo_12,
    largo_usado_63 = largo_63,
    updated_at = NOW()
  WHERE id_programa = programa_id;

  -- Retornar los valores actualizados
  RETURN QUERY SELECT 
    programa_id::text,
    tiempo_total::integer,
    largo_38::numeric,
    largo_25::numeric,
    largo_19::numeric,
    largo_12::numeric,
    largo_63::numeric,
    true::boolean,
    'Resumen del programa actualizado exitosamente'::text;
END;
$$;

-- 2. FUNCIÓN PARA OBTENER PEDIDOS DE UN PROGRAMA
-- ================================================

CREATE OR REPLACE FUNCTION get_pedidos_programa(programa_id text)
RETURNS TABLE (
  id_pedido integer,
  id_cliente integer,
  disenio text,
  medida_pedida text,
  medida_real text,
  archivo_vector text,
  tiempo_estimado numeric,
  fecha_compra date,
  valor_sello numeric,
  estado_fabricacion text,
  tipo_planchuela integer,
  largo_planchuela double precision,
  nombre_cliente text,
  apellido_cliente text,
  telefono_cliente text
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    p.id_pedido,
    p.id_cliente,
    p.disenio,
    p.medida_pedida,
    p.medida_real,
    p.archivo_vector,
    p.tiempo_estimado,
    p.fecha_compra,
    p.valor_sello,
    p.estado_fabricacion,
    p.tipo_planchuela,
    p.largo_planchuela,
    c.nombre_cliente,
    c.apellido_cliente,
    c.telefono_cliente
  FROM pedidos p
  INNER JOIN clientes c ON p.id_cliente = c.id_cliente
  WHERE p.id_programa = programa_id
  ORDER BY p.fecha_compra DESC, p.id_pedido ASC;
END;
$$;

-- 3. FUNCIÓN PARA OBTENER PROGRAMAS ACTIVOS
-- ==========================================

CREATE OR REPLACE FUNCTION get_programas_activos()
RETURNS TABLE (
  id_programa text,
  fecha_programa date,
  maquina text,
  programa_bloqueado boolean,
  nombre_archivo text,
  cantidad_sellos numeric,
  limite_tiempo integer,
  estado_programa character varying,
  verificado boolean,
  tiempo_usado integer,
  updated_at timestamp with time zone,
  cantidad_pedidos bigint,
  tiempo_total_pedidos numeric
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    pr.id_programa,
    pr.fecha_programa,
    pr.maquina,
    pr.programa_bloqueado,
    pr.nombre_archivo,
    pr.cantidad_sellos,
    pr.limite_tiempo,
    pr.estado_programa,
    pr.verificado,
    pr.tiempo_usado,
    pr.updated_at,
    COALESCE(COUNT(p.id_pedido), 0) AS cantidad_pedidos,
    COALESCE(SUM(p.tiempo_estimado), 0) AS tiempo_total_pedidos
  FROM programas pr
  LEFT JOIN pedidos p ON pr.id_programa = p.id_programa
  WHERE pr.estado_programa != 'Hecho'
  GROUP BY 
    pr.id_programa,
    pr.fecha_programa,
    pr.maquina,
    pr.programa_bloqueado,
    pr.nombre_archivo,
    pr.cantidad_sellos,
    pr.limite_tiempo,
    pr.estado_programa,
    pr.verificado,
    pr.tiempo_usado,
    pr.updated_at
  ORDER BY pr.fecha_programa DESC, pr.id_programa DESC;
END;
$$;

-- 4. FUNCIÓN PARA ACTUALIZAR PEDIDO CON MEDIDA
-- =============================================

CREATE OR REPLACE FUNCTION actualizar_pedido_con_medida(
  pedido_id integer,
  archivo_vector_path text,
  medida_real_value text,
  tiempo_estimado_value integer,
  tipo_planchuela_value integer,
  largo_planchuela_value double precision
)
RETURNS TABLE (
  id_pedido integer,
  archivo_vector text,
  medida_real text,
  tiempo_estimado numeric,
  tipo_planchuela integer,
  largo_planchuela double precision,
  updated_at timestamp with time zone
)
LANGUAGE plpgsql
AS $$
BEGIN
  -- Actualizar el pedido con todos los valores calculados
  UPDATE pedidos 
  SET 
    archivo_vector = archivo_vector_path,
    medida_real = medida_real_value,
    tiempo_estimado = tiempo_estimado_value,
    tipo_planchuela = tipo_planchuela_value,
    largo_planchuela = largo_planchuela_value,
    updated_at = NOW()
  WHERE pedidos.id_pedido = pedido_id;

  -- Retornar el pedido actualizado
  RETURN QUERY
  SELECT 
    p.id_pedido,
    p.archivo_vector,
    p.medida_real,
    p.tiempo_estimado,
    p.tipo_planchuela,
    p.largo_planchuela,
    p.updated_at
  FROM pedidos p
  WHERE p.id_pedido = pedido_id;
END;
$$;

-- 5. FUNCIÓN PARA BUSCAR PEDIDOS CON FILTROS
-- ===========================================

CREATE OR REPLACE FUNCTION buscar_pedidos(
  termino_busqueda text DEFAULT '',
  filtro_estado_fabricacion text DEFAULT '',
  filtro_estado_venta text DEFAULT '',
  filtro_estado_envio text DEFAULT '',
  filtro_fecha_desde date DEFAULT NULL,
  filtro_fecha_hasta date DEFAULT NULL,
  limite_resultados integer DEFAULT 100
)
RETURNS TABLE (
  id_pedido integer,
  id_cliente integer,
  disenio text,
  medida_pedida text,
  medida_real text,
  archivo_vector text,
  archivo_base text,
  tiempo_estimado numeric,
  fecha_compra date,
  valor_sello numeric,
  valor_envio numeric,
  valor_senia numeric,
  estado_fabricacion text,
  estado_venta text,
  estado_envio text,
  numero_seguimiento text,
  nombre_cliente text,
  apellido_cliente text,
  telefono_cliente text,
  restante_pagar numeric
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    p.id_pedido,
    p.id_cliente,
    p.disenio,
    p.medida_pedida,
    p.medida_real,
    p.archivo_vector,
    p.archivo_base,
    p.tiempo_estimado,
    p.fecha_compra,
    p.valor_sello,
    p.valor_envio,
    p.valor_senia,
    p.estado_fabricacion,
    p.estado_venta,
    p.estado_envio,
    p.numero_seguimiento,
    c.nombre_cliente,
    c.apellido_cliente,
    c.telefono_cliente,
    p.restante_pagar
  FROM pedidos p
  INNER JOIN clientes c ON p.id_cliente = c.id_cliente
  WHERE (
    termino_busqueda = '' OR
    p.disenio ILIKE '%' || termino_busqueda || '%' OR
    c.nombre_cliente ILIKE '%' || termino_busqueda || '%' OR
    c.apellido_cliente ILIKE '%' || termino_busqueda || '%' OR
    c.telefono_cliente ILIKE '%' || termino_busqueda || '%' OR
    p.numero_seguimiento ILIKE '%' || termino_busqueda || '%' OR
    p.id_pedido::text ILIKE '%' || termino_busqueda || '%'
  )
  AND (filtro_estado_fabricacion = '' OR p.estado_fabricacion = filtro_estado_fabricacion)
  AND (filtro_estado_venta = '' OR p.estado_venta = filtro_estado_venta)
  AND (filtro_estado_envio = '' OR p.estado_envio = filtro_estado_envio)
  AND (filtro_fecha_desde IS NULL OR p.fecha_compra >= filtro_fecha_desde)
  AND (filtro_fecha_hasta IS NULL OR p.fecha_compra <= filtro_fecha_hasta)
  ORDER BY p.fecha_compra DESC, p.id_pedido DESC
  LIMIT limite_resultados;
END;
$$;

-- 6. FUNCIÓN PARA ASIGNAR PEDIDO A PROGRAMA
-- =========================================

CREATE OR REPLACE FUNCTION asignar_pedido_programa(
  pedido_id integer,
  programa_id text
)
RETURNS TABLE (
  id_pedido integer,
  id_programa text,
  updated_at timestamp with time zone,
  success boolean,
  message text
)
LANGUAGE plpgsql
AS $$
DECLARE
  programa_exists boolean;
BEGIN
  -- Verificar si el programa existe
  SELECT EXISTS(SELECT 1 FROM programas WHERE id_programa = programa_id) INTO programa_exists;
  
  IF NOT programa_exists THEN
    RETURN QUERY SELECT 
      pedido_id::integer,
      programa_id::text,
      NOW()::timestamp with time zone,
      false::boolean,
      'El programa especificado no existe'::text;
    RETURN;
  END IF;

  -- Asignar el pedido al programa
  UPDATE pedidos 
  SET 
    id_programa = programa_id,
    updated_at = NOW()
  WHERE id_pedido = pedido_id;

  -- Retornar resultado
  RETURN QUERY SELECT 
    pedido_id::integer,
    programa_id::text,
    NOW()::timestamp with time zone,
    true::boolean,
    'Pedido asignado exitosamente al programa'::text;
END;
$$;

-- 7. FUNCIÓN PARA ACTUALIZAR ESTADO DE PROGRAMA Y SUS PEDIDOS
-- ===========================================================

CREATE OR REPLACE FUNCTION actualizar_estado_programa_con_pedidos(
  programa_id text,
  nuevo_estado character varying
)
RETURNS TABLE (
  id_programa text,
  estado_programa character varying,
  pedidos_actualizados bigint,
  success boolean,
  message text
)
LANGUAGE plpgsql
AS $$
DECLARE
  pedidos_count bigint;
BEGIN
  -- Verificar que el programa existe
  IF NOT EXISTS(SELECT 1 FROM programas WHERE id_programa = programa_id) THEN
    RETURN QUERY SELECT 
      programa_id::text,
      nuevo_estado::character varying,
      0::bigint,
      false::boolean,
      'El programa especificado no existe'::text;
    RETURN;
  END IF;

  -- Actualizar el estado del programa
  UPDATE programas 
  SET 
    estado_programa = nuevo_estado,
    updated_at = NOW()
  WHERE id_programa = programa_id;

  -- Actualizar el estado de fabricación de todos los pedidos asociados
  UPDATE pedidos 
  SET 
    estado_fabricacion = nuevo_estado::text,
    updated_at = NOW()
  WHERE id_programa = programa_id;

  -- Contar cuántos pedidos fueron actualizados
  GET DIAGNOSTICS pedidos_count = ROW_COUNT;

  -- Retornar resultado
  RETURN QUERY SELECT 
    programa_id::text,
    nuevo_estado::character varying,
    pedidos_count::bigint,
    true::boolean,
    'Programa y pedidos actualizados exitosamente'::text;
END;
$$;

-- 8. FUNCIÓN PARA ELIMINAR PROGRAMA Y DESASOCIAR PEDIDOS
-- ======================================================

CREATE OR REPLACE FUNCTION eliminar_programa_y_desasociar_pedidos(
  programa_id text
)
RETURNS TABLE (
  id_programa text,
  pedidos_desasociados bigint,
  success boolean,
  message text
)
LANGUAGE plpgsql
AS $$
DECLARE
  pedidos_count bigint;
BEGIN
  -- Verificar que el programa existe
  IF NOT EXISTS(SELECT 1 FROM programas WHERE programas.id_programa = eliminar_programa_y_desasociar_pedidos.programa_id) THEN
    RETURN QUERY SELECT 
      eliminar_programa_y_desasociar_pedidos.programa_id::text,
      0::bigint,
      false::boolean,
      'El programa especificado no existe'::text;
    RETURN;
  END IF;

  -- Desasociar todos los pedidos del programa (establecer id_programa = NULL)
  UPDATE pedidos 
  SET 
    id_programa = NULL,
    updated_at = NOW()
  WHERE pedidos.id_programa = eliminar_programa_y_desasociar_pedidos.programa_id;

  -- Contar cuántos pedidos fueron desasociados
  GET DIAGNOSTICS pedidos_count = ROW_COUNT;

  -- Eliminar el programa
  DELETE FROM programas WHERE programas.id_programa = eliminar_programa_y_desasociar_pedidos.programa_id;

  -- Retornar resultado
  RETURN QUERY SELECT 
    eliminar_programa_y_desasociar_pedidos.programa_id::text,
    pedidos_count::bigint,
    true::boolean,
    'Programa eliminado y pedidos desasociados exitosamente'::text;
END;
$$;

-- 9. TRIGGER PARA ACTUALIZAR PEDIDOS AUTOMÁTICAMENTE CUANDO CAMBIA EL ESTADO DEL PROGRAMA
-- =======================================================================================

CREATE OR REPLACE FUNCTION trigger_actualizar_pedidos_por_estado_programa()
RETURNS TRIGGER AS $$
BEGIN
  -- Si el estado del programa cambió
  IF OLD.estado_programa IS DISTINCT FROM NEW.estado_programa THEN
    -- Actualizar el estado de fabricación de todos los pedidos asociados
    UPDATE pedidos 
    SET 
      estado_fabricacion = NEW.estado_programa::text,
      updated_at = NOW()
    WHERE pedidos.id_programa = NEW.id_programa;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear el trigger
DROP TRIGGER IF EXISTS trigger_actualizar_pedidos_estado_programa ON programas;
CREATE TRIGGER trigger_actualizar_pedidos_estado_programa
  AFTER UPDATE ON programas
  FOR EACH ROW
  EXECUTE FUNCTION trigger_actualizar_pedidos_por_estado_programa();

-- 10. TRIGGER PARA DESASOCIAR PEDIDOS CUANDO SE ELIMINA UN PROGRAMA
-- ==================================================================

CREATE OR REPLACE FUNCTION trigger_desasociar_pedidos_al_eliminar_programa()
RETURNS TRIGGER AS $$
BEGIN
  -- Desasociar todos los pedidos del programa que se está eliminando
  UPDATE pedidos 
  SET 
    id_programa = NULL,
    updated_at = NOW()
  WHERE pedidos.id_programa = OLD.id_programa;
  
  RETURN OLD;
END;
$$ LANGUAGE plpgsql;

-- Crear el trigger
DROP TRIGGER IF EXISTS trigger_desasociar_pedidos_eliminar_programa ON programas;
CREATE TRIGGER trigger_desasociar_pedidos_eliminar_programa
  BEFORE DELETE ON programas
  FOR EACH ROW
  EXECUTE FUNCTION trigger_desasociar_pedidos_al_eliminar_programa();

-- Función RPC para búsqueda de pedidos con ordenamiento múltiple
-- Permite ordenar por: fecha_compra, estado_fabricacion, estado_venta, estado_envio, vectorizacion, id_programa
create or replace function buscar_pedidos_ordenado_multiple(
  termino_busqueda text default '',
  filtro_estado_fabricacion text default '',
  filtro_estado_venta text default '',
  filtro_estado_envio text default '',
  filtro_fecha_desde date default null,
  filtro_fecha_hasta date default null,
  limite_resultados integer default 500,
  criterios_orden jsonb default '[]'
)
returns table (
  id_pedido integer,
  id_cliente integer,
  id_programa text,
  disenio text,
  medida_pedida text,
  medida_real text,
  archivo_vector text,
  archivo_base text,
  tiempo_estimado numeric,
  fecha_compra date,
  valor_sello numeric,
  valor_envio numeric,
  valor_senia numeric,
  estado_fabricacion text,
  estado_venta text,
  estado_envio text,
  numero_seguimiento text,
  notas text,
  foto_sello text,
  restante_pagar numeric,
  nombre_cliente text,
  apellido_cliente text,
  telefono_cliente text,
  medio_contacto text
) as $$
declare
  query text;
  order_clause text := '';
  criterio record;
  where_conditions text := '';
begin
  -- Construir condiciones WHERE con parámetros interpolados
  where_conditions := '1=1'; -- Siempre verdadero como base
  
  if termino_busqueda != '' then
    where_conditions := where_conditions || ' and (p.disenio ilike ''%' || termino_busqueda || '%'' or c.nombre_cliente ilike ''%' || termino_busqueda || '%'' or c.apellido_cliente ilike ''%' || termino_busqueda || '%'')';
  end if;
  
  if filtro_estado_fabricacion != '' then
    where_conditions := where_conditions || ' and p.estado_fabricacion = ''' || filtro_estado_fabricacion || '''';
  end if;
  
  if filtro_estado_venta != '' then
    where_conditions := where_conditions || ' and p.estado_venta = ''' || filtro_estado_venta || '''';
  end if;
  
  if filtro_estado_envio != '' then
    where_conditions := where_conditions || ' and p.estado_envio = ''' || filtro_estado_envio || '''';
  end if;
  
  if filtro_fecha_desde is not null then
    where_conditions := where_conditions || ' and p.fecha_compra >= ''' || filtro_fecha_desde || '''';
  end if;
  
  if filtro_fecha_hasta is not null then
    where_conditions := where_conditions || ' and p.fecha_compra <= ''' || filtro_fecha_hasta || '''';
  end if;

  -- Construir la cláusula ORDER BY dinámicamente
  if criterios_orden is not null and jsonb_array_length(criterios_orden) > 0 then
    for criterio in select * from jsonb_array_elements(criterios_orden) with ordinality as t(criterio, idx)
    loop
      if order_clause != '' then
        order_clause := order_clause || ', ';
      end if;
      
      -- Validar que el campo sea uno de los permitidos
      case criterio->>'field'
        when 'fecha_compra' then
          order_clause := order_clause || 'p.fecha_compra ' || (criterio->>'order');
        when 'estado_fabricacion' then
          order_clause := order_clause || 'p.estado_fabricacion ' || (criterio->>'order');
        when 'estado_venta' then
          order_clause := order_clause || 'p.estado_venta ' || (criterio->>'order');
        when 'estado_envio' then
          order_clause := order_clause || 'p.estado_envio ' || (criterio->>'order');
        when 'vectorizacion' then
          order_clause := order_clause || 'p.vectorizacion ' || (criterio->>'order');
        when 'id_programa' then
          order_clause := order_clause || 'p.id_programa ' || (criterio->>'order');
        else
          -- Campo no válido, ignorar
          continue;
      end case;
    end loop;
  end if;
  
  -- Si no hay criterios de ordenamiento, usar ordenamiento por defecto
  if order_clause = '' then
    order_clause := 'p.fecha_compra desc';
  end if;

  -- Construir la consulta final con JOIN a clientes
  query := 'select p.id_pedido, p.id_cliente, p.id_programa, p.disenio, p.medida_pedida, p.medida_real, p.archivo_vector, p.archivo_base, p.tiempo_estimado, p.fecha_compra, p.valor_sello, p.valor_envio, p.valor_senia, p.estado_fabricacion, p.estado_venta, p.estado_envio, p.numero_seguimiento, p.notas, p.foto_sello, p.restante_pagar, c.nombre_cliente, c.apellido_cliente, c.telefono_cliente, c.medio_contacto from pedidos p left join clientes c on p.id_cliente = c.id_cliente where ' || where_conditions || ' order by ' || order_clause || ' limit ' || limite_resultados;
  
  -- Retornar los resultados directamente
  return query execute (query);
end;
$$ language plpgsql;

-- Función auxiliar para validar criterios de ordenamiento
create or replace function validar_criterio_ordenamiento(
  campo text,
  orden text
)
returns boolean as $$
begin
  -- Validar campo
  if campo not in ('fecha_compra', 'estado_fabricacion', 'estado_venta', 'estado_envio', 'vectorizacion', 'id_programa') then
    return false;
  end if;
  
  -- Validar orden
  if orden not in ('asc', 'desc') then
    return false;
  end if;
  
  return true;
end;
$$ language plpgsql;

-- ================================================
-- INSTRUCCIONES DE USO
-- ================================================

/*
Para usar estas funciones desde tu aplicación React:

1. actualizar_resumen_programa(programa_id)
   const { data } = await supabase.rpc('actualizar_resumen_programa', { programa_id: 'PROG123' });

2. get_pedidos_maquina_c() / get_pedidos_maquina_g() / get_pedidos_maquina_xl()
   const { data } = await supabase.rpc('get_pedidos_maquina_c');

3. get_pedidos_programa(programa_id)
   const { data } = await supabase.rpc('get_pedidos_programa', { programa_id: 'PROG123' });

4. get_programas_activos()
   const { data } = await supabase.rpc('get_programas_activos');

5. actualizar_pedido_con_medida(pedido_id, datos...)
   const { data } = await supabase.rpc('actualizar_pedido_con_medida', {
     pedido_id: 123,
     archivo_vector_path: 'vector/archivo.svg',
     medida_real_value: '5x3',
     tiempo_estimado_value: 300,
     tipo_planchuela_value: 25,
     largo_planchuela_value: 5.0
   });

6. buscar_pedidos(filtros...)
   const { data } = await supabase.rpc('buscar_pedidos', {
     termino_busqueda: 'texto',
     filtro_estado_fabricacion: 'Sin Hacer',
     limite_resultados: 50
   });

7. asignar_pedido_programa(pedido_id, programa_id)
   const { data } = await supabase.rpc('asignar_pedido_programa', {
     pedido_id: 123,
     programa_id: 'PROG123'
   });

8. remover_pedido_programa(pedido_id)
   const { data } = await supabase.rpc('remover_pedido_programa', {
     pedido_id: 123
   });
*/

-- ================================================
-- FUNCIÓN PARA EDITAR PEDIDO
-- ================================================

CREATE OR REPLACE FUNCTION editar_pedido(
  p_id integer,
  p_fecha_compra date DEFAULT NULL,
  p_valor_sello numeric DEFAULT NULL,
  p_valor_envio numeric DEFAULT NULL,
  p_valor_senia numeric DEFAULT NULL,
  p_estado_fabricacion text DEFAULT NULL,
  p_estado_venta text DEFAULT NULL,
  p_estado_envio text DEFAULT NULL,
  p_notas text DEFAULT NULL,
  p_disenio text DEFAULT NULL,
  p_archivo_base text DEFAULT NULL,
  p_archivo_vector text DEFAULT NULL,
  p_foto_sello text DEFAULT NULL,
  p_numero_seguimiento text DEFAULT NULL,
  p_medida_pedida text DEFAULT NULL
)
RETURNS TABLE (
  id_pedido integer,
  success boolean,
  message text
)
LANGUAGE plpgsql
AS $$
BEGIN
  -- Verificar que el pedido existe
  IF NOT EXISTS (SELECT 1 FROM pedidos WHERE id_pedido = p_id) THEN
    RETURN QUERY SELECT 
      p_id,
      false,
      'Pedido no encontrado'::text;
    RETURN;
  END IF;

  -- Actualizar el pedido
  UPDATE pedidos SET
    fecha_compra = COALESCE(p_fecha_compra, fecha_compra),
    valor_sello = COALESCE(p_valor_sello, valor_sello),
    valor_envio = COALESCE(p_valor_envio, valor_envio),
    valor_senia = COALESCE(p_valor_senia, valor_senia),
    estado_fabricacion = COALESCE(p_estado_fabricacion, estado_fabricacion),
    estado_venta = COALESCE(p_estado_venta, estado_venta),
    estado_envio = COALESCE(p_estado_envio, estado_envio),
    notas = COALESCE(p_notas, notas),
    disenio = COALESCE(p_disenio, disenio),
    archivo_base = COALESCE(p_archivo_base, archivo_base),
    archivo_vector = COALESCE(p_archivo_vector, archivo_vector),
    foto_sello = COALESCE(p_foto_sello, foto_sello),
    numero_seguimiento = COALESCE(p_numero_seguimiento, numero_seguimiento),
    medida_pedida = COALESCE(p_medida_pedida, medida_pedida),
    updated_at = NOW()
  WHERE id_pedido = p_id;

  -- Retornar resultado
  RETURN QUERY SELECT 
    p_id,
    true,
    'Pedido actualizado correctamente'::text;
END;
$$;

-- ================================================
-- FUNCIÓN PARA EDITAR CLIENTE
-- ================================================

CREATE OR REPLACE FUNCTION editar_cliente(
  p_id_pedido integer,
  p_nombre_cliente text DEFAULT NULL,
  p_apellido_cliente text DEFAULT NULL,
  p_telefono_cliente text DEFAULT NULL,
  p_medio_contacto text DEFAULT NULL
)
RETURNS TABLE (
  id_cliente integer,
  success boolean,
  message text
)
LANGUAGE plpgsql
AS $$
DECLARE
  cliente_id integer;
BEGIN
  -- Obtener el ID del cliente del pedido
  SELECT id_cliente INTO cliente_id FROM pedidos WHERE id_pedido = p_id_pedido;
  
  IF cliente_id IS NULL THEN
    RETURN QUERY SELECT 
      NULL::integer,
      false,
      'Pedido no encontrado'::text;
    RETURN;
  END IF;

  -- Verificar que el cliente existe
  IF NOT EXISTS (SELECT 1 FROM clientes WHERE id_cliente = cliente_id) THEN
    RETURN QUERY SELECT 
      cliente_id,
      false,
      'Cliente no encontrado'::text;
    RETURN;
  END IF;

  -- Actualizar el cliente
  UPDATE clientes SET
    nombre_cliente = COALESCE(p_nombre_cliente, nombre_cliente),
    apellido_cliente = COALESCE(p_apellido_cliente, apellido_cliente),
    telefono_cliente = COALESCE(p_telefono_cliente, telefono_cliente),
    medio_contacto = COALESCE(p_medio_contacto, medio_contacto),
    updated_at = NOW()
  WHERE id_cliente = cliente_id;

  -- Retornar resultado
  RETURN QUERY SELECT 
    cliente_id,
    true,
    'Cliente actualizado correctamente'::text;
END;
$$;

-- ================================================
-- FUNCIÓN PARA ELIMINAR PEDIDO
-- ================================================

CREATE OR REPLACE FUNCTION eliminar_pedido(p_id integer)
RETURNS TABLE (
  success boolean,
  message text
)
LANGUAGE plpgsql
AS $$
BEGIN
  -- Verificar que el pedido existe
  IF NOT EXISTS (SELECT 1 FROM pedidos WHERE id_pedido = p_id) THEN
    RETURN QUERY SELECT 
      false,
      'Pedido no encontrado'::text;
    RETURN;
  END IF;

  -- Eliminar el pedido
  DELETE FROM pedidos WHERE id_pedido = p_id;

  -- Retornar resultado
  RETURN QUERY SELECT 
    true,
    'Pedido eliminado correctamente'::text;
END;
$$;

-- ================================================
-- TRIGGER PARA ACTUALIZAR RESUMEN DE PROGRAMA AUTOMÁTICAMENTE
-- ================================================

CREATE OR REPLACE FUNCTION trigger_actualizar_resumen_programa()
RETURNS TRIGGER AS $$
BEGIN
  -- Si se insertó un nuevo pedido con programa asignado
  IF TG_OP = 'INSERT' AND NEW.id_programa IS NOT NULL THEN
    PERFORM actualizar_resumen_programa(NEW.id_programa);
  END IF;
  
  -- Si se actualizó un pedido y cambió el programa
  IF TG_OP = 'UPDATE' THEN
    -- Si cambió el programa, actualizar ambos programas (el anterior y el nuevo)
    IF OLD.id_programa IS DISTINCT FROM NEW.id_programa THEN
      IF OLD.id_programa IS NOT NULL THEN
        PERFORM actualizar_resumen_programa(OLD.id_programa);
      END IF;
      IF NEW.id_programa IS NOT NULL THEN
        PERFORM actualizar_resumen_programa(NEW.id_programa);
      END IF;
    -- Si no cambió el programa pero sí cambió tiempo_estimado o tipo_planchuela o largo_planchuela
    ELSIF OLD.tiempo_estimado IS DISTINCT FROM NEW.tiempo_estimado OR 
          OLD.tipo_planchuela IS DISTINCT FROM NEW.tipo_planchuela OR 
          OLD.largo_planchuela IS DISTINCT FROM NEW.largo_planchuela THEN
      PERFORM actualizar_resumen_programa(NEW.id_programa);
    END IF;
  END IF;
  
  -- Si se eliminó un pedido
  IF TG_OP = 'DELETE' AND OLD.id_programa IS NOT NULL THEN
    PERFORM actualizar_resumen_programa(OLD.id_programa);
  END IF;
  
  RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Crear el trigger
DROP TRIGGER IF EXISTS trigger_actualizar_resumen_programa ON pedidos;
CREATE TRIGGER trigger_actualizar_resumen_programa
  AFTER INSERT OR UPDATE OR DELETE ON pedidos
  FOR EACH ROW
  EXECUTE FUNCTION trigger_actualizar_resumen_programa();