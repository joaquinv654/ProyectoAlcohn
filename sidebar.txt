import { useState } from "react";
import { Link, useLocation } from "react-router-dom";
import { FiChevronRight, FiChevronDown } from "react-icons/fi";
import { useUser } from "../hooks/useUser";
import {
  FiHome, FiBox, FiUser, FiBook, FiTruck, FiSmile, FiLayers, FiFolder, FiMail, FiHelpCircle, FiPackage
} from "react-icons/fi";

export default function Sidebar({ tareasPendientes = 0, vectorizacionPendiente = 0, verificacionPendiente = 0, chatsConPendientes = 0, perfil, logout }) {
  const location = useLocation();
  const [expanded, setExpanded] = useState(false);
  const [fixed, setFixed] = useState(false);
  const [openMenu, setOpenMenu] = useState(null);

  const isExpanded = expanded || fixed;

  const navItems = [
    { to: "/", label: "Home", icon: <FiHome /> },
    { 
      to: "/pedidos", 
      label: "Pedidos", 
      icon: <FiBox />, 
      badge: tareasPendientes,
      subpages: [
        { to: "/pedidos", label: "Pedidos", icon: <FiBox /> },
        { to: "/pedidos/muestras", label: "Muestras", icon: <FiPackage /> },
        { to: "/pedidos/dudas-agente", label: "Dudas del Agente", icon: <FiHelpCircle /> },
      ]
    },
    {
      to: "/produccion",
      label: "Producción",
      icon: <FiLayers />, 
      subpages: [
        { to: "/produccion/vectorizacion", label: "Vectorización", badge: vectorizacionPendiente },
        { to: "/produccion/plan", label: "Plan de Producción" },
        { to: "/produccion/stock", label: "Stock" },
        { to: "/produccion/verificacion", label: "Verificación", badge: verificacionPendiente },
        { to: "/produccion/calendario", label: "Calendario de Producción" },
        { to: "/produccion/errores", label: "Errores" },
      ]
    },
    { to: "/logistica", label: "Logística", icon: <FiTruck /> },
    { to: "/motivacion", label: "Motivación", icon: <FiSmile /> },
    { to: "/aprendizaje", label: "Aprendizaje", icon: <FiBook /> },
    { to: "/identidad", label: "Identidad", icon: <FiBook /> },
    { to: "/proyectos", label: "Proyectos", icon: <FiFolder /> },
    { to: "/chat", label: "Chat", icon: <FiMail />, badge: chatsConPendientes },
  ];

  return (
    <aside
      className={`fixed top-6 left-6 h-[92vh] z-50 flex flex-col justify-between shadow-2xl border border-white/30 bg-black/80 backdrop-blur-xl transition-all duration-300 rounded-3xl ${isExpanded ? 'w-64 px-4' : 'w-16 px-1'}`}
      onMouseEnter={() => !fixed && setExpanded(true)}
      onMouseLeave={() => !fixed && setExpanded(false)}
    >
      {/* Botón para fijar/desfijar expansión */}
      <button
        className={`absolute -right-4 top-6 bg-black/70 border border-white/30 rounded-full p-1 transition-all ${isExpanded ? "rotate-180" : ""}`}
        onClick={() => setFixed(f => !f)}
        tabIndex={0}
        aria-label={fixed ? "Desfijar barra lateral" : "Fijar barra lateral"}
      >
        <FiChevronRight className="text-white" />
      </button>
      <div className={`flex flex-col items-center gap-8 mt-6 h-full ${isExpanded ? 'overflow-y-auto custom-scrollbar' : ''}`}>
        {/* Logo o icono superior */}
        <div className="mb-2 text-2xl text-white">{navItems[0].icon}</div>
        <nav className="flex flex-col gap-2 w-full">
          {navItems.map(item => (
            <div key={item.to} className="relative">
              {item.subpages ? (
                <button
                  className={`flex items-center gap-3 py-2 px-2 rounded-xl w-full transition-all hover:bg-white/10 ${location.pathname.startsWith(item.to) && item.to !== '/' ? 'bg-white/10 text-primary' : location.pathname === item.to ? 'bg-white/10 text-primary' : 'text-white/80'} ${isExpanded ? 'justify-start' : 'justify-center'}`}
                  onClick={() => setOpenMenu(openMenu === item.to ? null : item.to)}
                  tabIndex={0}
                  aria-label={item.label}
                >
                  <span className="text-xl">{item.icon}</span>
                  {isExpanded && <span className="font-semibold text-base">{item.label}</span>}
                  {item.badge > 0 && (
                    <span className="ml-auto bg-primary text-xs text-black rounded-full px-2 py-0.5 font-bold">
                      {item.badge}
                    </span>
                  )}
                  {item.subpages && isExpanded && (
                    <span className="ml-2">
                      <FiChevronDown className={`transition-transform ${openMenu === item.to ? 'rotate-180' : ''}`} />
                    </span>
                  )}
                </button>
              ) : (
                <Link
                  to={item.to}
                  className={`flex items-center gap-3 py-2 px-2 rounded-xl w-full transition-all hover:bg-white/10 ${location.pathname === item.to ? 'bg-white/10 text-primary' : 'text-white/80'} ${isExpanded ? 'justify-start' : 'justify-center'}`}
                  tabIndex={0}
                  aria-label={item.label}
                >
                  <span className="text-xl">{item.icon}</span>
                  {isExpanded && <span className="font-semibold text-base">{item.label}</span>}
                  {item.badge > 0 && (
                    <span className="ml-auto bg-primary text-xs text-black rounded-full px-2 py-0.5 font-bold">
                      {item.badge}
                    </span>
                  )}
                </Link>
              )}
              {/* Submenú desplegable solo con click */}
              {item.subpages && openMenu === item.to && isExpanded && (
                <div className="ml-8 flex flex-col gap-1 mt-1">
                  {item.subpages.map(sub => (
                    <Link
                      key={sub.to}
                      to={sub.to}
                      className={`px-3 py-2 rounded-lg text-base flex items-center gap-2 transition-all hover:bg-white/10 hover:text-primary ${location.pathname === sub.to ? 'bg-primary/30 text-primary font-bold' : 'text-white/60'}`}
                      onClick={() => setOpenMenu(null)}
                    >
                      <span className="mr-2 align-middle">{sub.icon ? sub.icon : <span className="inline-block w-5" />}</span>
                      {sub.label}
                      {sub.badge > 0 && (
                        <span className="ml-2 inline-flex items-center justify-center w-5 h-5 rounded-full bg-purple-600 text-white text-xs font-bold">
                          {sub.badge}
                        </span>
                      )}
                    </Link>
                  ))}
                </div>
              )}
            </div>
          ))}
        </nav>
      </div>
      {/* Usuario abajo como link a perfil */}
      <Link
        to="/profile"
        className={`flex items-center gap-3 mb-4 transition-all cursor-pointer hover:bg-white/10 rounded-xl ${isExpanded ? "py-2 px-2 justify-start" : "justify-center"}`}
        tabIndex={0}
        aria-label="Perfil"
        style={{ minHeight: '48px' }}
      >
        {perfil && perfil.avatar_url ? (
          <img
            src={perfil.avatar_url}
            alt="avatar"
            style={{
              maxWidth: isExpanded ? 32 : 24,
              maxHeight: isExpanded ? 32 : 24,
              borderRadius: 4,
              display: "block"
            }}
          />
        ) : (
          <span className={`${isExpanded ? 'w-8 h-8' : 'w-6 h-6'} rounded-full bg-[#222] flex items-center justify-center`}>
            <svg width="24" height="24" fill="none" stroke="#fff" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><circle cx="12" cy="8" r="4"/><path d="M4 20c0-4 4-7 8-7s8 3 8 7"/></svg>
          </span>
        )}
        {isExpanded && perfil && (
          <div>
            <div className="font-bold text-white leading-tight">{perfil.full_name || perfil.nombre || perfil.nickname}</div>
            <div className="text-xs text-white/70 capitalize">{perfil.rol || perfil.area}</div>
          </div>
        )}
      </Link>
      {/* Botón logout solo expandido */}
      {isExpanded && (
        <button onClick={logout} className="w-full mb-4 py-2 rounded-xl bg-white/10 text-white font-semibold hover:bg-red-500/80 transition-all">Cerrar sesión</button>
      )}
    </aside>
  );
} 